#!/bin/bash -e -x

################################################################
# Program: ngseasy_fastqc
# Version 1.0 
# Author: Stephen Newhouse (stephen.j.newhouse@gmail.com)
#################################################################

## Set version and run date
#
NGSEASYVERSION="1.0"
RUNDATE=`date +"%d%m%y"`

## global logging fuction
#
function logger_ngseasy() {
 message=${1}
 mylogfile=${2}
 echo -e [`date`]":[NGSEASY:${NGSEASYVERSION}]:"${message}":[${USER}]:[`uname -a`]" >> ${mylogfile}.log;
 echo -e [`date`]":[NGSEASY:${NGSEASYVERSION}]:"${message}":[${USER}]:[`uname -a`]"
}


## global usage
#
function ngseasy_fastqc_usage() {
    echo "
Program: ngseasy_fastqc
Version 1.0
Author: Stephen Newhouse (stephen.j.newhouse@gmail.com)

usage:   ngseasy_fastqc -c <config_file> -d <project_directory>

options: -h  show this message

ngseasy_fastqc sets up the NGSeasy docker fastqc container compbio/ngseasy-fastq and runs fastq on raw fastq files.

This is is optomised for PE data, and calls 2 threads as default to process the 2 PE .fastq file simultaneuously.
"
}

## test if docker is intsalled and exit if not
command -v docker >/dev/null 2>&1 || { echo "I require Dokcer...but it's not installed.  Aborting." >&2; exit 1; }

## check and make ~/ngseasy_logs if needed
#
if [[ ! -e  ${HOME}/ngseasy_logs ]]
then
  mkdir ${HOME}/ngseasy_logs
  global_run_logs="${HOME}/ngseasy_logs"
fi

## Check options passed in.
#
if test -z "$2"
then
  logger_ngseasy "[ngseasy_fastqc]:ERROR:No options found"
  ngseasy_fastqc_usage
  exit 1
fi

## get options for command line args
  while  getopts "hc:d:" opt
  do

      case ${opt} in
	  h)
	  ngseasy_fastqc_usage #print help
	  exit 0
	  ;;
	  
	  c)
	  config_tsv=${OPTARG}
	  ;;

	  d)
	  project_directory=${OPTARG}
	  ;; 
      esac
  done

## check config file exists.
if [ ! -e "${config_tsv}" ] 
then
	    logger_ngseasy "[ngseasy_fastqc]:ERROR : [${config_tsv}] does not exist....exiting "
	    ngseasy_fastqc_usage;
	    exit 1;
else
	    ngseasy_fastqc_usage "[ngseasy_fastqc]:Configuration file found [${config_tsv}] "
fi

#check project_directory exists.
if [ ! -d "${project_directory}" ]
  then
    logger_ngseasy "[ngseasy_fastqc]:ERROR : project_directory [${project_directory}] does not exist "
    ngseasy_fastqc_usage;
    exit 1;
else
	    ngseasy_fastqc_usage "[ngseasy_fastqc]:Top Level Project Directory [${project_directory}] "
fi

## Read config file 
logger_ngseasy "[ngseasy_fastqc]:Reading [${config_tsv}] "

## params to get
## trim gatk bsqr realign 
##

while read -r f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 f20 f21
do

## set varibales  
  DATE=`date +"%d%m%y"`
  
  POJECT_ID=$f1
  SAMPLE_ID=$f2
  FASTQ1=$f3
  FASTQ2=$f4
  PROJECT_DIR=$f5 
  DNA_PREP_LIBRARY_ID=$f6
  NGS_PLATFORM=$f7
  NGS_TYPE=$f8
  BED_ANNO=$f9
  PIPELINE=$f10
  TRIM=$f11
  GATK=$f12
  BSQR=$f13
  REALN=$f14
  ALIGNER=$f15
  VARCALLER=$f16
  GTMODEGATK=$f17
  CLEANUP=$f18
  NCPU=$f19
  VERSION=$f20
  NGSUSER=$f21

## read config_file
logger_ngseasy "[ngseasy_fastqc]:
  $DATE\t
  $POJECT_ID\t
  $SAMPLE_ID\t
  $FASTQ1\t
  $FASTQ2\t
  $PROJECT_DIR\t 
  $DNA_PREP_LIBRARY_ID\t
  $NGS_PLATFORM\t
  $NGS_TYPE\t
  $BED_ANNO\t
  $PIPELINE\t
  $TRIM\t
  $GATK\t
  $BSQR\t
  $REALN\t
  $ALIGNER\t
  $VARCALLER\t
  $GTMODEGATK\t
  $CLEANUP\t
  $NCPU\t
  $VERSION\t
  $NGSUSER\t"
  
## Logfile 
LOGFILE=${PROJECT_DIR}/${POJECT_ID}/run_logs/${SAMPLE_ID}.${DATE}
touch ${LOGFILE}.log
logger_ngseasy "[ngseasy_fastqc]:Logging to [${LOGFILE}.log] "

## OUTPUT SAMPLE DIR 
SOUT=${PROJECT_DIR}/${POJECT_ID}/${SAMPLE_ID}
logger_ngseasy "[ngseasy_fastqc]:Sample Directory [${SOUT}] "


#check local dir exists
if [ ! -d "${PROJECT_DIR}/${POJECT_ID}/${SAMPLE_ID}" ]
then
  logger_ngseasy "[ngseasy_fastqc]: Cant Find Project directory. This is then end. Please Stop and check everything is ok " ${LOGFILE}
  exit 1

else 
  logger_ngseasy "[ngseasy_fastqc]: Setting OUTPUT directory [${SOUT}]" ${LOGFILE}
fi

#check for fastq files exist
if [ ! -s "${SOUT}/fastq/${FASTQ1}" ] && [ ! -s "${SOUT}/fastq/${FASTQ2}" ]
then
  logger_ngseasy "[ngseasy_fastqc]: Can't Find fastq files [${SOUT}/fastq/${FASTQ1}] and [${SOUT}/fastq/${FASTQ2}] in ${SOUT}/fastq/ " ${LOGFILE}
  exit 1
fi

#set new names for copied fastq files

# test for fomrat of suffix ie is it fastq or fq
# or _R1.fastq _R1.fq
# ILLUMINA : NA10831_ATCACG_L002_R1_001.fastq.gz
# Illumina FASTQ files use the following naming scheme:
# <sample name>_<barcode sequence>_L<lane (0-padded to 3 digits)>_R<read number>_<set number (0-padded to 3 digits>.fastq.gz


if [[ "${FASTQ1}" == *_1.fastq.gz ]] 
then

  rawFASTQ1=`basename ${SOUT}/fastq/${FASTQ1} _1.fastq.gz`
  rawFASTQ2=`basename ${SOUT}/fastq/${FASTQ2} _2.fastq.gz`
  
  fq1_suffix="1.fastq.gz"
  fq2_suffix="2.fastq.gz"
 
elif [[ "${FASTQ1}" == *_R1.fastq.gz ]] 
then

  rawFASTQ1=`basename ${SOUT}/fastq/${FASTQ1} _R1.fastq.gz`
  rawFASTQ2=`basename ${SOUT}/fastq/${FASTQ2} _R2.fastq.gz`

  fq1_suffix="R1.fastq.gz"
  fq2_suffix="R2.fastq.gz"  
  
elif [[ "${FASTQ1}" == *_1.fq.gz ]] 
then

  rawFASTQ1=`basename ${SOUT}/fastq/${FASTQ1} _1.fq.gz`
  rawFASTQ2=`basename ${SOUT}/fastq/${FASTQ2} _2.fq.gz`

  fq1_suffix="1.fq.gz"
  fq2_suffix="2.fq.gz"  
  
elif [[ "${FASTQ1}" == *_R1.fq.gz ]] 
then

  rawFASTQ1=`basename ${SOUT}/fastq/${FASTQ1} _R1.fq.gz`
  rawFASTQ2=`basename ${SOUT}/fastq/${FASTQ2} _R2.fq.gz`
  
  fq1_suffix="R1.fq.gz"
  fq2_suffix="R2.fq.gz"  

elif [[ "${FASTQ1}" == *_L*_R1_[0-9][0-9][0-9].fastq.gz ]] 
then

  logger_ngseasy "[ngseasy_fastqc]:Illumina fastq naming scheme\n"

  rawFASTQ1=`basename ${SOUT}/fastq/${FASTQ1} .fastq.gz`
  rawFASTQ2=`basename ${SOUT}/fastq/${FASTQ2} .fastq.gz`

  fq1_suffix="R1.fastq.gz"
  fq2_suffix="R2.fastq.gz" 

  logger_ngseasy "[ngseasy_fastqc]:Stripping <set number (0-padded to 3 digits> from fastq names\n"
  
  rename -v s/_[0-9][0-9][0-9]//g  ${FASTQ1}
  rename -v s/_[0-9][0-9][0-9]//g  ${FASTQ2}

elif [[ "${FASTQ1}" == *_L*_R1_[0-9][0-9][0-9][0-9].fastq.gz ]] 
then

  logger_ngseasy "[ngseasy_fastqc]:Illumina fastq naming scheme\n"

  rawFASTQ1=`basename ${SOUT}/fastq/${FASTQ1} .fastq.gz`
  rawFASTQ2=`basename ${SOUT}/fastq/${FASTQ2} .fastq.gz`

  fq1_suffix="R1.fastq.gz"
  fq2_suffix="R2.fastq.gz" 

  logger_ngseasy "[ngseasy_fastqc]:Stripping <set number (0-padded to 3 digits> from fastq names\n"
  
  rename -v s/_[0-9][0-9][0-9][0-9]//g  ${FASTQ1}
  rename -v s/_[0-9][0-9][0-9][0-9]//g  ${FASTQ2}
  
else

  logger_ngseasy "[ngseasy_fastqc]: Fastq naming format not recognised [$FASTQ1] : This should be one of [_1.fastq.gz] [_1.fq.gz] [_R1.fastq.gz] [_R1.fq.gz]" ${LOGFILE} 
  exit 1
fi        

    
logger_ngseasy "[ngseasy_fastqc]:Fastq Basename : [$rawFASTQ1] " ${LOGFILE}

#-------------------------------------------------------------------#

#check if qc'd data alread exists 
if [ -s "${SOUT}/fastq/${rawFASTQ1}_${fq1_suffix}_fastqc.zip" ] && [ -s "${SOUT}/fastq/${rawFASTQ2}_${fq2_suffix}_fastqc.zip" ] 
then
  logger_ngseasy "[ngseasy_fastqc]:FastQC Data already exists...skipping" ${LOGFILE}
  exit 1
fi

#---------------------------------------FASTQC-----------------------------------------------------------#
  logger_ngseasy "[ngseasy_fastqc]:START: FastQC on raw Fastq files " ${LOGFILE}

#run compbio/ngseasy-fastq
#Docker Output Dir: this is the mouned directory set by ngseasy_volumes_container

DOCKERHOME="/home/pipeman/ngs_projects"

#Docker OUTPUT SAMPLE DIR 
SOUTDocker=${DOCKERHOME}/${POJECT_ID}/${SAMPLE_ID}

# Docker run compbio/ngseasy-fastqc
logger_ngseasy "[ngseasy_fastqc]:[cmd]: /usr/local/pipeline/FastQC/fastqc --threads 2 --extract --quiet --dir ${SOUTDocker}/tmp --outdir ${SOUTDocker}/fastq ${SOUTDocker}/fastq/${rawFASTQ1}_${fq1_suffix}.gz ${SOUTDocker}/fastq/${rawFASTQ2}_${fq1_suffix}.gz" ${LOGFILE}

docker run \
  -P \
  --rm=true \
  --name fastqc.${SAMPLE_ID} \
  --volumes-from volumes_container \
  -w /home/pipeman \
  -t compbio/ngseasy-fastqc:${VERSION} /usr/local/pipeline/FastQC/fastqc \
    --threads 2 \
    --extract \
    --quiet \
    --dir ${SOUTDocker}/tmp \
    --outdir ${SOUTDocker}/fastq \
    ${SOUTDocker}/fastq/${rawFASTQ1}_${fq1_suffix}.gz \
    ${SOUTDocker}/fastq/${rawFASTQ2}_${fq2_suffix}.gz
        
    ## log it
    docker logs fastqc.${SAMPLE_ID} >> ${LOGFILE}.log
    docker rm fastqc.${SAMPLE_ID}  
  
#################
## get some info
ONUMREADS1=$(grep "Total Sequences" ${SOUTDocker}/fastq/${rawFASTQ1}_${fq1_suffix}.gz_fastqc/fastqc_data.txt | awk '{print $3}')
ONUMREADS2=$(grep "Total Sequences" ${SOUTDocker}/fastq/${rawFASTQ2}_${fq2_suffix}.gz_fastqc/fastqc_data.txt | awk '{print $3}')
QUALSTRING=$(grep "Encoding" fastqc_data.txt | awk '{print $2,$4,$5}')
OREADLENGTH=$(grep "Sequence length" fastqc_data.txt | awk '{print $3}')
QUALCODE=$(awk '{print $3}' $QUALSTRING)

  
logger_ngseasy "[ngseasy_fastqc]:END: FastQC on raw Fastq files "  ${LOGFILE}

  
  
#------permissions------------#
chmod -R 777 ${SOUT}/*

done < ${config_tsv}
