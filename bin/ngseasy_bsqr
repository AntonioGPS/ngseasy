#!/bin/bash

################################################################
# Program: ngseasy_bsqr
# Version 1.0 
# Author: Stephen Newhouse (stephen.j.newhouse@gmail.com)
#################################################################
echo -e "\n################################################################"
echo -e "# Program: ngseasy_bsqr"
echo -e "# Version 1.0"
echo -e "# Author: Stephen Newhouse (stephen.j.newhouse@gmail.com)"
echo -e "#################################################################\n"

#################################################################

########################################################################################################
## test if docker is intsalled and exit if not
command -v docker >/dev/null 2>&1 || { echo "I require Docker...but it's not installed.  Aborting." >&2; exit 1; }

########################################################################################################
## Set version and run date
#
NGSEASYVERSION="1.0"
RUNDATE=`date +"%d%m%y"`

########################################################################################################
## docker run command
#
DOCKER_RUN="docker run -P -w /home/pipeman -e HOME=/home/pipeman -e USER=pipeman --user pipeman"

########################################################################################################
## global logging fuction
#
function logger_ngseasy() {
 message=${1}
 mylogfile=${2}
 echo -e [`date`]":[NGSEASY:${NGSEASYVERSION}]:"${message}":[${USER}]:[`uname -a`]" >> ${mylogfile}.log;
 echo -e [`date`]":[NGSEASY:${NGSEASYVERSION}]:"${message}":[${USER}]:[`uname -a`]"
}

########################################################################################################
## global usage
#
function ngseasy_bsqr_usage() {
    echo "
Program: ngseasy_bsqr
Version 1.0
Author: Stephen Newhouse (stephen.j.newhouse@gmail.com)

usage:   ngseasy_bsqr -c <config_file> -d <project_directory>

options:  -c  STRING  configuration file
          -d  STRING  project directory
          -h  NULL    show this message

ngseasy_bsqr sets up the NGSeasy docker containers for your Base quality score recalibrator of choice ie bamUtil of GATK.
"
}

########################################################################################################
## check and make ~/ngseasy_logs if needed
#
if [[ ! -e  ${HOME}/ngseasy_logs ]]
then
  mkdir ${HOME}/ngseasy_logs
  global_run_logs="${HOME}/ngseasy_logs"
fi

########################################################################################################
## Check options passed in.
#
if test -z "$2"
then
  logger_ngseasy "[ngseasy_bsqr]:ERROR:No options found"
  ngseasy_bsqr_usage
  exit 1
fi

########################################################################################################
## get options for command line args
  while  getopts "hc:d:" opt
  do

      case ${opt} in
    h)
    ngseasy_bsqr_usage #print help
    exit 0
    ;;
    
    c)
    config_tsv=${OPTARG}
    ;;

    d)
    project_directory=${OPTARG}
    ;; 
      esac
  done

########################################################################################################  
## check config file exists.
#
if [[ ! -e "${config_tsv}" ]] 
then
      logger_ngseasy "[ngseasy_bsqr]:ERROR : [${config_tsv}] does not exist or can not be found. Exiting "
      ngseasy_bsqr_usage;
      exit 1;
else
      logger_ngseasy "[ngseasy_bsqr]:Configuration file found [${config_tsv}] "
fi

########################################################################################################
## check project_directory exists.
#
if [[ ! -d "${project_directory}" ]]
  then
    logger_ngseasy "[ngseasy_bsqr]:ERROR : project_directory [${project_directory}] does not exist "
    ngseasy_bsqr_usage;
    exit 1;
else
      logger_ngseasy "[ngseasy_bsqr]:Top Level Project Directory [${project_directory}] "
fi

########################################################################################################
## check Num feilds in  ${config_tsv}
#
logger_ngseasy "[ngseasy_bsqr]:Reading [${config_tsv}] "
logger_ngseasy "[ngseasy_bsqr]:Checking number of feilds in  [${config_tsv}] "

numcols=`awk '{ print NF }' ${config_tsv} | sort -g | head -1`

if [[  "$numcols" -lt 23 ]] 
then
      logger_ngseasy "[ngseasy_bsqr]:ERROR: [${config_tsv}] format issue. Check your file! "
      exit 1;
  else 
      logger_ngseasy "[ngseasy_bsqr]:Number of expected columns [$numcols] of [${config_tsv}] ok...proceeding... "     
fi


########################################################################################################
## Read config file 

## check ${config_tsv}. is this a batch file or the orginal config file 
#
logger_ngseasy "[ngseasy_bsqr]:Checking [${config_tsv}] format" ${HOME}/ngseasy_logs/ngseasy.${config_tsv}.${RUNDATE}

hasheader=`sed 1q ${config_tsv} | grep PROJECT_ID | wc -l | awk '{print $1}'`

if [[ "${config_tsv}" == *.batch.* ]]
then
  logger_ngseasy "[ngseasy_bsqr]:[${config_tsv}] is a BACTH file ie a subset of the original config file" ${HOME}/ngseasy_logs/ngseasy.${config_tsv}.${RUNDATE}
  RUNFILE="${config_tsv}"
  logger_ngseasy "[ngseasy_bsqr]:Setting RUNFILE to [${RUNFILE}]" ${HOME}/ngseasy_logs/ngseasy.${config_tsv}.${RUNDATE}
elif [[ "$hasheader" -eq 1 ]]
then
  logger_ngseasy "[ngseasy_bsqr]:[${config_tsv}] header present. Removing this" ${HOME}/ngseasy_logs/ngseasy.${config_tsv}.${RUNDATE}
  logger_ngseasy "[ngseasy_bsqr]:[cmd]:sed 1d \${config_tsv} > ${config_tsv}.tmp" ${HOME}/ngseasy_logs/ngseasy.${config_tsv}.${RUNDATE}
  sed 1d ${config_tsv} > ${config_tsv}.tmp
  RUNFILE="${config_tsv}.tmp"
  logger_ngseasy "[ngseasy_bsqr]:Setting RUNFILE to [${RUNFILE}]" ${HOME}/ngseasy_logs/ngseasy.${config_tsv}.${RUNDATE}
else
  RUNFILE="${config_tsv}"
  logger_ngseasy "[ngseasy_bsqr]:[${RUNFILE}] is seemingly perfect" ${HOME}/ngseasy_logs/ngseasy.${config_tsv}.${RUNDATE}
  logger_ngseasy "[ngseasy_bsqr]:Setting RUNFILE to [${RUNFILE}]" ${HOME}/ngseasy_logs/ngseasy.${config_tsv}.${RUNDATE}
fi

########################################################################################################
## Read config and loop through all lines calling fastqc docker
#
GENOMEBUILD=""
REFDIR=""
GENOMEINDEX=""

while read -r f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 f20 f21 f22 f23
do
PROJECT_ID=$f1;
SAMPLE_ID=$f2;
FASTQ1=$f3;
FASTQ2=$f4;
PROJECT_DIR=$f5;
DNA_PREP_LIBRARY_ID=$f6;
NGS_PLATFORM=$f7;
NGS_TYPE=$f8;
BAIT=$f9;
CAPTURE=$f10;
GENOMEBUILD=$f11;
FASTQC=$f12;
TRIM=$f13;
BSQR=$f14;
REALN=$f15;
ALIGNER=$f16;
VARCALLER=$f17;
CNV=$f18;
ANNOTATOR=$f19;
CLEANUP=$f20;
NCPU=$f21;
NGSEASYVERSION=$f22;
NGSUSER=$f23;
DATE=`date +"%d%m%y"`

########################################################################################################
## LOGFILE 
#

## check and make log directory
#
if [ ! -d "${PROJECT_DIR}/${PROJECT_ID}/run_logs/" ]
then
  mkdir ${PROJECT_DIR}/${PROJECT_ID}/run_logs/
fi

## LOGFILE 
#
LOGFILE="${PROJECT_DIR}/${PROJECT_ID}/run_logs/${SAMPLE_ID}.${TRIM}.${BSQR}.${REALN}.${ALIGNER}.${RUNDATE}.ngseasy_bsqr"
logger_ngseasy "[ngseasy_bsqr]:logging to [${LOGFILE}.log]"  ${LOGFILE}

## check and make logfile
#
if [ ! -e "${LOGFILE}.log" ]
then
  touch ${LOGFILE}.log
fi

## read config_file
#
logger_ngseasy "[ngseasy_bsqr]:Config:[$PROJECT_ID\t$SAMPLE_ID\t$FASTQ1\t$FASTQ2\t$PROJECT_DIR\t$DNA_PREP_LIBRARY_ID\t$NGS_PLATFORM\t
$NGS_TYPE\t$BAIT\t$CAPTURE\t$GENOMEBUILD\t$FASTQC\t$TRIM\t$BSQR\t$REALN\t$ALIGNER\t$VARCALLER\t$CNV\t$ANNOTATOR\t$CLEANUP\t$NCPU\t
$VERSION\t$NGSUSER]"  ${LOGFILE}


########################################################################################################
## OUTPUT SAMPLE DIR 
#
SOUT="${PROJECT_DIR}/${PROJECT_ID}/${SAMPLE_ID}"
logger_ngseasy "[ngseasy_bsqr]:Sample Directory [${SOUT}] "

########################################################################################################
## Docker Output Dir: this is the mouned directory set by ngseasy_volumes_container
#
DOCKERHOME="/home/pipeman/ngs_projects"
logger_ngseasy "[ngseasy_bsqr]:Docker home directory [${DOCKERHOME}]" ${LOGFILE}

########################################################################################################
## Docker OUTPUT SAMPLE DIR 
#
SOUTDocker="${DOCKERHOME}/${PROJECT_ID}/${SAMPLE_ID}"

logger_ngseasy "[ngseasy_bsqr]:Docker Output directory [${SOUTDocker}]" ${LOGFILE}


########################################################################################################
## check local dir exists
#
if [ ! -d "${PROJECT_DIR}/${PROJECT_ID}/${SAMPLE_ID}" ]
then
  logger_ngseasy "[ngseasy_bsqr]: Cant Find Project directory. This is then end. Please Stop and check everything is ok " ${LOGFILE}
  exit 1
else 
  logger_ngseasy "[ngseasy_bsqr]: Setting OUTPUT directory to [${SOUT}]" ${LOGFILE}
fi

########################################################################################################
## check for fastq files exist
#
if [ ! -s "${SOUT}/fastq/${FASTQ1}" ] && [ ! -s "${SOUT}/fastq/${FASTQ2}" ]
then
  logger_ngseasy "[ngseasy_bsqr]: Can't Find fastq files [${SOUT}/fastq/${FASTQ1}] and [${SOUT}/fastq/${FASTQ2}] in ${SOUT}/fastq/ " ${LOGFILE}
  exit 1
fi

########################################################################################################
## Select Genome Build and files
#
logger_ngseasy "[ngseasy_variant_calling]:Checking genome selected]"  ${LOGFILE}

if [[ "${GENOMEBUILD}" -eq "b37" ]]; then
  REFDIR="/home/pipeman/ngs_projects/reference_genomes_b37"
  GENOMEINDEX="${REFDIR}/human_g1k_v37"
  REFFASTA="${REFDIR}/human_g1k_v37.fasta"
  DBSNPb37="${REFDIR}/dbsnp_138.b37.recab"
  logger_ngseasy "[ngseasy_variant_calling]: Genome Build [${GENOMEBUILD}]" ${LOGFILE}
  logger_ngseasy "[ngseasy_variant_calling]:dbSNP file for bam recab b37 [${DBSNPb37}]" ${LOGFILE}

  #known indels and SNPs
  KNOWN_INDELS="${REFDIR}/Mills_and_1000G_gold_standard.indels.b37.vcf"
  KNOWN_SNPS_1000G="${REFDIR}/1000G_phase1.snps.high_confidence.b37.vcf"
  KNOWN_SNPS_OMNI="${REFDIR}/1000G_omni2.5.b37.vcf"
  KNOWN_SNPS_b138="${REFDIR}/dbsnp_138.b37.vcf"


elif [[ "${GENOMEBUILD}" -eq "hg19" ]]; then
  REFDIR="/home/pipeman/ngs_projects/reference_genomes_hg19"
  GENOMEINDEX="${REFDIR}/ucsc.hg19"
  REFFASTA="${REFDIR}/ucsc.hg19.fasta"
  DBSNPhg19="${REFDIR}/dbsnp_138.hg19.recab"
  logger_ngseasy "[ngseasy_variant_calling]: Genome Build [${GENOMEBUILD}]"  ${LOGFILE}
  logger_ngseasy "[ngseasy_variant_calling]:dbSNP file for bam recab hg19 [${DBSNPhg19}]" ${LOGFILE}

  #known indels and SNPs
  KNOWN_INDELS="${REFDIR}/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf"
  KNOWN_SNPS_1000G="${REFDIR}/1000G_phase1.snps.high_confidence.hg19.sites.vcf"
  KNOWN_SNPS_OMNI="${REFDIR}/1000G_omni2.5.hg19.sites.vcf"
  KNOWN_SNPS_b138="${REFDIR}/dbsnp_138.hg19.vcf"

else
  logger_ngseasy "[ngseasy_variant_calling]:No genome selected. Exiting. Choose one of [b37] or [hg19]"  ${LOGFILE}
  exit 1
fi


########################################################################################################
## check if Trimmed data alread exists and use it
#
if [ ! -s "${SOUT}/fastq/${SAMPLE_ID}.${NGS_TYPE}.${DNA_PREP_LIBRARY_ID}.${TRIM}_1.filtered.fastq.gz" ] && [ ! -s "${SOUT}/fastq/${SAMPLE_ID}.${NGS_TYPE}.${DNA_PREP_LIBRARY_ID}.${TRIM}_2.filtered.fastq.gz" ]
then
  logger_ngseasy "[ngseasy_bsqr]:ERROR:Trimmed FastQC Data does not exsts. Exiting" ${LOGFILE}
  logger_ngseasy "[ngseasy_bsqr]:Please run ngseasy_trimmomatic -c ${config_tsv} -d ${PROJECT_DIR}" ${LOGFILE}
  sleep 1s
  exit 1
else
  logger_ngseasy "[ngseasy_bsqr]:Trimmed FastQC Data exsts" ${LOGFILE}
  
  logger_ngseasy "[ngseasy_bsqr]:Setting FQ1:[${SAMPLE_ID}.${NGS_TYPE}.${DNA_PREP_LIBRARY_ID}.${TRIM}_1.filtered.fastq.gz] " ${LOGFILE}

##############
## FQ1
#
  FQ1="${SOUTDocker}/fastq/${SAMPLE_ID}.${NGS_TYPE}.${DNA_PREP_LIBRARY_ID}.${TRIM}_1.filtered.fastq.gz"
  
  logger_ngseasy "[ngseasy_bsqr]:Setting FQ2:[${SAMPLE_ID}.${NGS_TYPE}.${DNA_PREP_LIBRARY_ID}.${TRIM}_2.filtered.fastq.gz] " ${LOGFILE}

##############
## FQ2
#
  FQ2="${SOUTDocker}/fastq/${SAMPLE_ID}.${NGS_TYPE}.${DNA_PREP_LIBRARY_ID}.${TRIM}_2.filtered.fastq.gz"
fi

########################################################################################################
## BAM FILE NAME
#
# SAMPLE_ID.WEX.PE.ILLUMINA.atrim.bwa.b37.dupemk.bam [dupemk.${BSQR}.bam] [dupemk.${BSQR}.${REALN}.bam]
#
BAM_PREFIX="${SAMPLE_ID}.${NGS_TYPE}.${DNA_PREP_LIBRARY_ID}.${NGS_PLATFORM}.${TRIM}.${ALIGNER}.${GENOMEBUILD}"

logger_ngseasy "[ngseasy_bsqr]:Setting BAM prefix to [${BAM_PREFIX}] " ${LOGFILE}

########################################################################################################
## CHECK BAMS EXIST
#

########################################################################################################
## BSQR
########################################################################################################

if [[ "${BSQR}" == "no-bsqr" ]]; then
  
  logger_ngseasy "[ngseasy_bsqr]:Skipping Base quality score recalibration" ${LOGFILE}

elif [[ "${BSQR}" == "bam-bsqr" ]]; then
      
      BAMIN=${SOUTDocker}/alignments/${BAM_PREFIX}.dupemk.bam
      BAMOUT=${SOUTDocker}/alignments/${BAM_PREFIX}.dupemk.bam-bsqr.bam
  
  logger_ngseasy "[ngseasy_bsqr]:START Base quality score recalibration using bam recab" ${LOGFILE}

  ${DOCKER_RUN} \
  --rm=true \
  -v ${PROJECT_DIR}:/home/pipeman/ngs_projects \
  --name bamrecab_${BAM_PREFIX} \
  -t compbio/ngseasy-base:${NGSEASYVERSION} \
  /usr/local/bin/bam \
  recab \
  --in ${BAMIN} \
  --out ${BAMOUT} \
  --refFile ${REFFASTA} \
  --dbsnp ${DBSNP} \
  --storeQualTag OQ \
  --maxBaseQual 40;

  elif [[ "${BSQR}" == "gatk-bsqr"  ]]; then

      BAMIN=${SOUTDocker}/alignments/${BAM_PREFIX}.dupemk.bam
      BAMOUT=${SOUTDocker}/alignments/${BAM_PREFIX}.dupemk.gatk-bsqr.bam
  
  logger_ngseasy "[ngseasy_bsqr]:START Base quality score recalibration using GATK" ${LOGFILE}

  ${DOCKER_RUN} \
  --rm=true \
  -v ${PROJECT_DIR}:/home/pipeman/ngs_projects \
  --name gatkrecab_${BAM_PREFIX} \
  -t compbio/ngseasy-gatk:${NGSEASYVERSION} /bin/bash -c \
  "java -Xmx48g -jar /usr/local/bin/GenomeAnalysisTK.jar \
  -T BaseRecalibrator \
  -nct ${NCPU} \
  -R ${REFFASTA} \
  -knownSites ${KNOWN_INDELS} \
  -knownSites ${KNOWN_SNPS_b138} \
  -knownSites ${KNOWN_SNPS_OMNI} \
  -knownSites ${KNOWN_SNPS_1000G} \
  -I ${BAMIN} \
  -o ${SOUTDocker}/reports/${BAM_PREFIX}.dupemk.bam.recal_data.table && \
  java -Xmx48g -jar /usr/local/bin/GenomeAnalysisTK.jar \
  -T PrintReads \
  -nct ${NCPU} \
  -R ${REFFASTA} \
  -I ${BAMIN} \
  -BSQR ${SOUTDocker}/reports/${BAM_PREFIX}.dupemk.bam. recal_data.table \
  -0 ${BAMOUT}"
else
  logger_ngseasy "[ngseasy_bsqr]:ERROR: Do not recognise BSQR option [${BSQR}]. This should be one or [bam-bsqr] [gatk-bsqr] or [no-bsqr]. Exiting" ${LOGFILE}
  sleep 2s
  exit 1
fi

######################################################################################################## 
## permissions
#
chmod -R 777 ${SOUT}/*

## END ##
done < ${RUNFILE}