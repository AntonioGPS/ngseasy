#########################################################################
# -- Author: Amos Folarin                                               #
# -- Author: Stephen J Newhouse                                         #
# -- Organisation: KCL/SLaM                                             #
# -- Email: amosfolarin@gmail.com                                       #
#########################################################################


#------------------------------------------------------------------------
#
#                            #######
#     #    #   ####    ####  #          ##     ####    #   #
#     ##   #  #    #  #      #         #  #   #         # #
#     # #  #  #        ####  #####    #    #   ####      #
#     #  # #  #  ###       # #        ######       #     #
#     #   ##  #    #  #    # #        #    #  #    #     #
#     #    #   ####    ####  #######  #    #   ####      #
#
# This dockerfile should build the enviroment required for the ngs 
# pipeline. Alternatively you can just get the docker container pre-built
# from our repository
#------------------------------------------------------------------------

#As a multi-component system, NGS pipeline setup is traditionally heavy on
#configuration. Our idea is to provide this in a simple encapsulated container.
#Users also typically wish to configure their own environments and run the
#pipeline on a wide range of hardware (workstations to clusters to cloud), being
#able to stand-up a pipeline with minimal fuss is made straightforward with this
#container.
#
# The containers for this NGS pipeline:
# 
# ngseasy pipeline 
#   https://github.com/KHP-Informatics/ngs/blob/master/containerized/pipeline/Dockerfile
# ngs_storage container 
#   https://github.com/KHP-Informatics/ngs/blob/master/containerized/storage/Dockerfile
#
#- Pipeline components are stored in /usr/local/pipeline/
#- The user for running the pipeline is: pipeman
#- Intermediary pipeine files are stored in the container under this dir
#   structure: TODO
#
# The system looks something like this:
#
#>     [ ngseasy  container ]... x n
#>     |
#>     |____[ storage container ]  #reference genomes
#>     |
#>     |____{ mounted volume pwd }  #pass config file from host
#>     |
#>     |____{ volume //data } #container output
#

#------------------------------------------------------------------------
# BUILDING THE DOCKER IMAGE FROM THIS Dockerfile:
# download this Dockerfile into a clean directory e.g. build_dir
# Due to licencing, you should get your own versions of:
# 
# 1) Download the compressed files into the build_dir, then edit the lines
# of the Dockerfile to the correct versions of ANNOVAR and GATK
#   * novoalign http://www.novocraft.com/
#   * Stampy http://www.well.ox.ac.uk/project-stampy
#   * GATK https://www.broadinstitute.org/gatk/
#   * ANNOVAR http://www.openbioinformatics.org/annovar/
#
# 2) $ cd build_dir
# 3) $ sudo docker build --tag <repo-name:tag> .
#------------------------------------------------------------------------

#------------------------------------------------------------------------
# VOLUMES and VOLUME CONTAINERS
# Mount a volume external to the container to store stuff that needs to persist
#------------------------------------------------------------------------
#------ Pass in the config file via another volume, mount host pwd
# You should mount the pwd when you launch docker, and then make sure the config file 
# resides in pwd.
# Then the docker process can read the file from /tmp/config/<configfile>
#   $ docker run -v .:/tmp/config
#
#------ RUN mkdir /pipeln
# FASTQ Staging Area
#RUN bash mkdir /pipeln/staging/ ## !!! this should be in an external volume !!!!
# REF Data
#RUN bash mkdir /pipeln/refdata ## !!! this should be in an external volume!!!!!
# Results Folder by projetc and sample

#------ Reference sequence data TODO:
# Option1. Mount a volume in a dedicated Volume Container *Probably Preferred*
#   $ docker run volumes-from <storage_container> 
# the storage_container should have a directory with the data
# /media/ngsEasy/data/reference
#
# Or...
#
# Option2.  mount shared directory on host
#   $ docker run -v /*host*/data/reference:/media/ngsEasy/data/reference

# Base image will be Trusty
#FROM ubuntu:trusty
FROM ubuntu

# Maintainer Amos Folarin
MAINTAINER Amos Folarin amosfolarin@gmail.com

# Set correct environment variables.
ENV HOME /root

RUN apt-get update

# Required basic stuff, make, gcc, wget etc
RUN apt-get install -y gcc 
RUN apt-get install -y g++
RUN apt-get install -y python-dev
RUN apt-get install -y make 
RUN apt-get install -y tabix
RUN apt-get install -y git-core 
RUN apt-get install -y wget 
RUN apt-get install -y unzip
RUN apt-get install -y zlib1g-dev 
RUN apt-get install -y libncurses5-dev
RUN apt-get install -y sysvbanner
RUN apt-get install -y openjdk-7-jre
RUN apt-get install -y openjdk-7-jdk
RUN apt-get install -y curl 
RUN apt-get install -y libcurl3
RUN apt-get install -y php5-curl 
RUN apt-get install -y libxml2 
RUN apt-get install -y libxslt-dev 
RUN apt-get install -y libxml2-dev 
RUN apt-get install -y fastx-toolkit
RUN apt-get install -y htmldoc 
RUN apt-get install -y html2text
RUN apt-get install -y perl
RUN apt-get install -y perl-modules
RUN apt-get install -y bioperl
RUN apt-get install -y tree
RUN apt-get install -y tabix
RUN apt-get install -y bzip2
RUN apt-get install -y build-essential 
RUN apt-get install -y cmake
RUN apt-get install -y dpkg-dev 
RUN apt-get install -y binutils
RUN apt-get install -y libx11-dev
RUN apt-get install -y libxpm-dev
RUN apt-get install -y libxft-dev
RUN apt-get install -y libxext-dev
RUN apt-get install -y gfortran
RUN apt-get install -y libssl-dev
RUN apt-get install -y libpcre3-dev
RUN apt-get install -y xlibmesa-glu-dev 
RUN apt-get install -y libglew1.5-dev 
RUN apt-get install -y libftgl-dev
RUN apt-get install -y libmysqlclient-dev 
RUN apt-get install -y libfftw3-dev 
RUN apt-get install -y cfitsio-dev
RUN apt-get install -y graphviz-dev 
RUN apt-get install -y libavahi-compat-libdnssd-dev
RUN apt-get install -y libldap2-dev 
RUN apt-get install -y libkrb5-dev
RUN apt-get install -y libgsl0-dev 
RUN apt-get install -y libqt4-dev


#------------------------------------------------------------------------
# USER SETUP
#------------------------------------------------------------------------
# Create a pipeline user:pipeman and group:ngsgroup
RUN useradd -m -s /bin/bash pipeman && cd /home/pipeman && echo "#bash config file for user pipeman" >> /home/pipeman/.bashrc
RUN groupadd ngsgroup
RUN usermod -G ngsgroup pipeman
# USER pipeman

# give root access
echo "pipeman	ALL=(ALL)	ALL" >>  /etc/sudoers && RUN echo "%ngsgroup	ALL=(ALL)	ALL" >>  /etc/sudoers

#---------------------- Visualisations -----------------------------------

# + R (replace with installing the dev, if there is need to compile packages)
RUN sudo apt-get install -y r-base-dev r-cran-colorspace r-cran-date r-cran-lattice r-cran-hmisc
RUN /usr/bin/Rscript --no-save --no-restore -e 'install.packages("caret",dependencies=TRUE ,repos="http://cran.r-project.org")'
RUN /usr/bin/Rscript --no-save --no-restore -e 'install.packages("gdata",dependencies=TRUE ,repos="http://cran.r-project.org")'
RUN /usr/bin/Rscript --no-save --no-restore -e 'install.packages("gplots",dependencies=TRUE ,repos="http://cran.r-project.org")'
RUN /usr/bin/Rscript --no-save --no-restore -e 'install.packages("ggplot2",dependencies=TRUE ,repos="http://cran.r-project.org")'
RUN /usr/bin/Rscript --no-save --no-restore -e 'install.packages("RColorBrewer",dependencies=TRUE ,repos="http://cran.r-project.org")'
RUN /usr/bin/Rscript --no-save --no-restore -e 'install.packages("doMC",dependencies=TRUE ,repos="http://cran.r-project.org")'
RUN /usr/bin/Rscript --no-save --no-restore -e 'install.packages("caTools",dependencies=TRUE ,repos="http://cran.r-project.org")'
RUN /usr/bin/Rscript --no-save --no-restore -e 'install.packages("utils",dependencies=TRUE ,repos="http://cran.r-project.org")'
RUN /usr/bin/Rscript --no-save --no-restore -e 'install.packages("lattice",dependencies=TRUE ,repos="http://cran.r-project.org")'

#------------------------------------bioconductor---------------------------------
# install bioconductor -- mod the biocLite.R script so it fires default bioc installation
RUN /usr/bin/Rscript --no-save --no-restore -e 'source("http://www.bioconductor.org/biocLite.R"); biocLite()'


