{"name":"Ngseasy","tagline":"Dockerised Next Generation Sequencing Pipeline (QC, Align, Calling, Annotation)","body":"NGSeasy (beta)\r\n===================\r\n** This is the latest dev project **  \r\n**note**: undergoing massive re-dev , many links broken...stay tuned and email us. give us a few weeks.  \r\n\r\n[Funded by Biomedical Research Centre](http://core.brc.iop.kcl.ac.uk): http://core.brc.iop.kcl.ac.uk\r\n\r\nPublication: pending\r\n\r\nAuthors: Stephen J Newhouse, Amos Folarin , Maximilian Kerz  \r\nRelease Version: **1.0.0b**  \r\n\r\n****************\r\n### [A [Dockerized](https://www.docker.com/) NGS pipeline and tool-box] \r\n****************\r\n<a href=\"https://twitter.com/share\" class=\"twitter-share-button\" data-via=\"s_j_newhouse\">Tweet</a>\r\n<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>\r\n**With NGSeasy you can now have full suite of NGS tools up and running on any high end workstation in an afternoon**\r\n\r\n**Getting started: [The 12 Easy Steps to NGS Freedom!](https://github.com/KHP-Informatics/ngs#the-12-easy-steps-to-ngs-freedom)**  \r\n\r\n\r\n**Note:** NGSeasy is under **heavy development** and the code and docs evolve quickly.  \r\n\r\n- **NGSeasy-v1.0 Full Production release will be available Early 2015**  \r\n\r\n\r\n- **NGSeasy-v1.0.0b Full Production release contains most of the core fucntionality to go from raw fastq to raw vcf calls**\r\n- **NGSeasy updates every 12 months**\r\n- **GUI in development**\r\n- **Contact us of Reference Genomes and resource files**  \r\n\r\n****************\r\n\r\n>NGSeasy is completely open source and we encourage interested folks to jump in and get involved in the dev with us.\r\n\r\n****************\r\n\r\nNGSeasy (Easy Analysis of Next Generation Sequencing)\r\n=======================================================\r\nWe present **NGSeasy (Easy Analysis of Next Generation Sequencing)**, a flexible and easy-to-use NGS pipeline for automated alignment, quality control, variant calling and annotation. The pipeline allows users with minimal computational/bioinformatic skills to set up and run an NGS analysis on their own samples, in less than an afternoon, on any operating system (Windows, iOS or Linux) or infrastructure (workstation, cluster or cloud).\r\n\r\nNGS pipelines typically utilize a large and varied range of software components and incur a substantial configuration burden during deployment which limits their portability to different computational environments. NGSeasy simplifies this by providing the pipeline components encapsulated in Dockerâ„¢ containers and bundles in a wide choice of tools for each module. Each module of the pipeline represents one functional grouping of tools (e.g. sequence alignment, variant calling etc.).\r\n\r\nDeploying the pipeline is as simple as pulling the container images from the public repository into any host running Docker. NGSeasy can be deployed on any medium to high-end workstation, high performance computer cluster and compute clouds (public/private cloud computing) - enabling instant access to elastic scalability without investment overheads for additional compute hardware and makes open and reproducible research straight forward for the greater scientific community.\r\n\r\n### Advantages ###\r\n- Easy to use for non-informaticians.  \r\n- All run from a single config file that can be made in Excel.  \r\n- User can select from mutiple aligners, variant callers and variant annotators\r\n- No scary python, .yaml or .json files...just one simple Excel workbook saved as a textfile.  \r\n- Just follow our simple set of instructions and NGS away!  \r\n- Choice of aligners and variant callers and anntators  \r\n- Allows reproducible research  \r\n- Version controlled for auditing  \r\n- Customisable  \r\n- Easy to add new tools  \r\n- If it's broke...we will fix it..\r\n- Enforced naming convention and directory structures  \r\n- Allows users to run \"Bake Offs\" between tools with ease  \r\n\r\nWe have adapted the current best practices from the Genome Analysis Toolkit (GATK, http://www.broadinstitute.org/gatk/guide/best-practices)  for processing raw alignments in SAM/BAM format and variant calling. The current workflow, has been optimised for Illumina platforms, but can easily be adapted for other sequencing platforms, with minimal effort.  \r\n\r\nAs the containers themselves can be run as executables with pre-specified cpu and RAM resources, the orchestration of the pipeline can be placed under the control of conventional load balancers if this mode is required.  \r\n\r\n****\r\n### Author Contact Details\r\n\r\nPlease contact us for help/guidance on using the beta release. \r\n\r\n- Amos Folarin <amosfolarin@gmail.com>  [@amosfolarin](https://twitter.com/amosfolarin?lang=en)   \r\n<a href=\"http://www.linkedin.com/pub/amos-folarin/34/b06/978\">\r\n<img src=\"http://www.linkedin.com/img/webpromo/btn_viewmy_160x33.png\" width=\"160\" height=\"33\" alt=\"View Amos's profile on LinkedIn\">\r\n</a>\r\n\r\n- Stephen J Newhouse <stephen.j.newhouse@gmail.com> [@s_j_newhouse](https://twitter.com/s_j_newhouse?lang=en)  \r\n<a href=\"http://uk.linkedin.com/pub/dr-stephen-newhouse/29/89a/11a\">\r\n<img src=\"http://www.linkedin.com/img/webpromo/btn_viewmy_160x33.png\" width=\"160\" height=\"33\" alt=\"View Steve's profile on LinkedIn\">\r\n</a>\r\n\r\n**Lets us know if you want other tools added to NGSeasy**\r\n\r\n*Institution: NIHR Maudsley Biomedical Research Centre For Mental Health and Dementia Unit (Denmark Hill), at The Institute of Psychiatry, Psychology & Neuroscience (IoPPN), Kings College London* \r\n\r\n****************\r\n\r\nOverview of the NGSeasy Pipeline Components\r\n=============================================\r\nThe basic pipeline contains all the basic tools needed for manipulation and \r\nquality control of raw fastq files (ILLUMINA focused), SAM/BAM manipulation,\r\nalignment, cleaning (based on GATK best practises [http://www.broadinstitute.org/gatk/guide/best-practices]) and first pass\r\nvariant discovery. Separate containers are provided for indepth variant annotation,\r\nstructural variant calling, basic reporting and visualisations.  \r\n\r\n![ngsEASY](https://github.com/KHP-Informatics/ngs/blob/dev2/figs/ngsEASY_component_visualisation.png \"Dockerized NGS Pipeline\")\r\n\r\n\r\n****************\r\n\r\nThe Full NGSeasy pipeline\r\n=============================\r\n\r\nThe NGSeasy pipelines implement the following :-   \r\n\r\n- **Quality control of raw fastq** files using **[FASTQC](http://www.bioinformatics.babraham.ac.uk/projects/fastqc/)**  \r\n\r\n- **Read trimming** using **[TRIMMOMATIC](http://www.usadellab.org/cms/?page=trimmomatic)**.   \r\n\r\n- **Alignment** using one of \r\n    - **[BWA](http://bio-bwa.sourceforge.net/)**  \r\n    - **[STAMPY](http://www.well.ox.ac.uk/project-stampy)**   \r\n    - **[NOVOALIGN](http://www.novocraft.com)**  \r\n    - **[BOWTIE2](http://bowtie-bio.sourceforge.net/bowtie2/index.shtml)**  \r\n    - *[SNAP](http://snap.cs.berkeley.edu/): COMING SOON!*\r\n    \r\n- **SAM/BAM sorting and indexing** with **[SAMTOOLS](https://github.com/samtools/samtools)**.  \r\n\r\n- **Read Group information added** using **[PICARDTOOLS](http://broadinstitute.github.io/picard/):[AddOrReplaceReadGroups](http://broadinstitute.github.io/picard/command-line-overview.html#AddOrReplaceReadGroups)** \r\n\r\n- **Duplicate marking** with **[PICARDTOOLS](http://broadinstitute.github.io/picard/):[MarkDuplicates](http://broadinstitute.github.io/picard/command-line-overview.html#MarkDuplicates)**.  \r\n\r\n>For academic users and/or commercial/clinical groups whom have paid for GATK licensing, the next steps are to perform   \r\n\r\n- **Indel indel realignment and base quality score recalibration** using **[GATK](https://www.broadinstitute.org/gatk/)** built in tools :\r\n    - **[GATK:RealignerTargetCreator](https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_indels_RealignerTargetCreator.php)** \r\n    - **[GATK:IndelRealigner](https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_indels_IndelRealigner.php)** \r\n    - **[GATK:BaseRecalibrator](https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_bqsr_BaseRecalibrator.php)** \r\n\r\n> For the non-GATK version    \r\n\r\n- **Base quality score recalibration** using [BamUtil](http://genome.sph.umich.edu/wiki/BamUtil)  \r\n    - **[BamUtil:recab](http://genome.sph.umich.edu/wiki/BamUtil:_recab)** \r\n\r\n- **Post alignment quality control and reporting** is performed usng a number of tools and custom scripts: \r\n    - **[SAMTOOLS:flagstats](https://github.com/samtools/samtools)**\r\n    - **[BEDTOOLS:genomecov](https://github.com/arq5x/bedtools2)**\r\n    - **[BEDTOOLS:bamtobed](https://github.com/arq5x/bedtools2)**\r\n    - **[PICARDTOOLS:CollectMultipleMetrics](http://broadinstitute.github.io/picard/command-line-overview.html#CollectMultipleMetrics)**    \r\n    - **[PICARDTOOLS:CollectAlignmentSummaryMetrics](http://broadinstitute.github.io/picard/command-line-overview.html#CollectAlignmentSummaryMetrics)**    \r\n    - **[PICARDTOOLS:CollectWgsMetrics](http://broadinstitute.github.io/picard/command-line-overview.html#CollectWgsMetrics)**    \r\n    - **[PICARDTOOLS:CollectTargetedPcrMetrics](http://broadinstitute.github.io/picard/command-line-overview.html#CollectTargetedPcrMetrics)** (coming soon)    \r\n\r\n- **SNP and small INDEL** calling using one of the following or a combibation of these tools, if the `ensemble` method is called using **[bcbio.variation variant-ensemble](https://github.com/chapmanb/bcbio.variation)**\r\n    - **[FREEBAYES](https://github.com/ekg/freebayes)** \r\n    - **[PLATYPUS](http://www.well.ox.ac.uk/platypus)** \r\n    - **[GATK:UnifiedGenotyper](https://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_genotyper_UnifiedGenotyper.php)** \r\n    - **[GATK:HaplotypeCaller](https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_haplotypecaller_HaplotypeCaller.php)** \r\n\r\n- **Structural Variant (CNV)** calling using one of the following or or a combibation of if the `ensemble` methods are called:- \r\n    - **[DELLY](https://github.com/tobiasrausch/delly) : in Dev** \r\n    - **[LUMPY](https://github.com/arq5x/lumpy-sv/): in Dev**\r\n    - **[cn.MOPS](http://www.bioinf.jku.at/software/cnmops/): in Dev**\r\n    - **[m-HMM](https://www.stt.msu.edu/users/hengwang/mHMM.html): in Dev**\r\n    - **[ExomeDepth](http://cran.r-project.org/web/packages/ExomeDepth/index.html): in Dev**\r\n    - *[SLOPE](http://www-genepi.med.utah.edu/suppl/SLOPE/index.html) : COMING SOON!*\r\n\r\n- **Variant annotation** using using one of the following or a combibation of if the `ensemble` methods are called. \r\n    - **[SnpEff](http://snpeff.sourceforge.net/): in Dev** \r\n    - **[ANNOVAR](http://www.openbioinformatics.org/annovar/): in Dev** \r\n    - **[VEP](http://www.ensembl.org/info/docs/tools/vep/index.html): in Dev**\r\n\r\n- **Variant reporting** using custom scripts\r\n\r\n**Note** Some of the later functions i.e. variant annotation and qc reporting are still in dev.  \r\n\r\n****\r\n\r\n**We highly recommed read trimming prior to alignment.**\r\nWe have noticed considerable speed-ups in alignmnet time and increased quality of SNP/INDEL calls using trimmed vs raw fastq.  \r\n\r\n**Base quality score recalibration is also recommended.**  \r\nAs an alternative to GATK, we have added fucntionality for use of \r\n**[BamUtil](https://github.com/statgen/bamUtil):[recab](http://genome.sph.umich.edu/wiki/BamUtil:_recab)** \r\nfor base quality score recalibration.\r\n\r\n**Non-GATK users** \r\n- are encouraged to use aligners such as **[stampy](http://www.well.ox.ac.uk/project-stampy)** and **[novoalign](http://www.novocraft.com)** that perform base quality score recal on the fly.  \r\n- are encouraged to use variant callers that perform local re-aligmnet around candidate sites to mitigate the need for the indel realignment stages.  \r\n    - **[freebayes](https://github.com/ekg/freebayes)**\r\n    - **[platypus](http://www.well.ox.ac.uk/platypus)**\r\n\r\n********\r\n### Coming Soon\r\n- New Aligners:- [SNAP](http://snap.cs.berkeley.edu/), GSNAP, mr- and mrs-Fast,gem\r\n- https://github.com/amplab/snap\r\n- [SLOPE (CNV fo targetted NSG)] ((http://www.biomedcentral.com/1471-2164/12/184)) \r\n- Cancer Pipelines\r\n- Annotation Pipelines and Databases\r\n- Visualisation Pipelines\r\n- Var Callers:- VarScan2\r\n- SGE scripts and basic BASH scrips for running outside of Docker\r\n- biobambam https://github.com/gt1/biobambam  \r\n- bamaddrg https://github.com/ekg/bamaddrg  \r\n- bamtools https://github.com/ekg/bamtools  \r\n\r\n\r\n************\r\n\r\nDockerised NGSeasy\r\n==========================\r\n![docker](https://github.com/KHP-Informatics/ngs/blob/master/figs/Docker_container_engine_logo.png \"Docker\")  \r\n\r\nThe following section describes getting the Dockerised NGSeasy Pipeline(s) and Resources, project set up and running NGSeasy in **12 easy steps**.  \r\n\r\nGetting all resources and building required tools will take a few hours depending on network connections and any random \"ghosts in the machine\".\r\n\r\n*****\r\n\r\n## The 12 Easy Steps to NGS Freedom!\r\n\r\n**1. [Install Docker](https://github.com/KHP-Informatics/ngs#1-install-docker)**  \r\n**2. [Get NGSeasy Automated build Container Images](https://github.com/KHP-Informatics/ngs#2-get-ngseasy-automated-build-container-images)**  \r\n**3. [Make NGSeasy project directory](https://github.com/KHP-Informatics/ngs#3-make-ngseasy-project-directory)**  \r\n**4. [Download NGSeasy Resources](https://github.com/KHP-Informatics/ngs#4-download-ngseasy-resources)**  \r\n**5. [Get NGSeasy Sripts](https://github.com/KHP-Informatics/ngs#5-get-ngseasy-sripts)**  \r\n**6. [Manually Build required NGSeasy Container Images](https://github.com/KHP-Informatics/ngs#6-manually-build-required-ngseasy-container-images)**  \r\n**7. [Manually Build NGSeasy Variant Annotaion Container Images](https://github.com/KHP-Informatics/ngs#7-manually-build-ngseasy-variant-annotaion-container-images)**  \r\n**8. [Set up NGSeasy Project Working Directories](https://github.com/KHP-Informatics/ngs#8-set-up-ngseasy-project-working-directories)**  \r\n**9. [NGSeasy Project configuration file](https://github.com/KHP-Informatics/ngs#9-ngseasy-project-configuration-file)**  \r\n**10. [Copy Project Fastq files to relevent Project/Sample Directories](https://github.com/KHP-Informatics/ngs#10-copy-project-fastq-files-to-relevent-projectsample-directories)**  \r\n**11. [Start the NGSeasy Volume Contaier](https://github.com/KHP-Informatics/ngs#11-start-the-ngseasy-volume-contaier)**  \r\n**12. [Running an NGSeasy full pipeline : from raw fastq to vcf calls](https://github.com/KHP-Informatics/ngs#12-running-an-ngseasy-full-pipeline--from-raw-fastq-to-vcf-calls)**  \r\n\r\n*****\r\n## 1. Install Docker\r\n\r\nFollow the simple instructions in the links provided below  \r\n\r\n- [Mac](https://docs.docker.com/installation/mac/)  \r\n- [Windows](https://docs.docker.com/installation/windows/)\r\n- [Ubuntu](https://docs.docker.com/installation/ubuntulinux/)\r\n\r\nA full set of instructions for multiple operating systems are available on the [Docker website](https://docs.docker.com/installation/).\r\n\r\n## 2. Get NGSeasy Automated build Container Images\r\n\r\nAll NGSeasy Docker images can be pulled down from **[compbio Docker Hub](https://hub.docker.com/u/compbio/)** or using the script [get_containers.sh](https://github.com/KHP-Informatics/ngs/blob/master/bin/get_containers.sh)\r\n\r\n```bash\r\n# get images\r\nbash get_containers.sh v1.0\r\n```\r\n\r\n### Dockerised and Automated Builds ##\r\n\r\nThe following opensource tools are all provided as automated builds. \r\n\r\n| Tool | Build |\r\n|-------------|----------------------|\r\n|[ngseasy-base](https://registry.hub.docker.com/u/compbio/ngseasy-base/) | automated build |\r\n|[fastqc](https://registry.hub.docker.com/u/compbio/ngseasy-fastqc) | automated build |\r\n|[trimmomatic](https://registry.hub.docker.com/u/compbio/ngseasy-trimmomatic) | automated build |\r\n|[bwa](https://registry.hub.docker.com/u/compbio/ngseasy-bwa) | automated build |\r\n|[bowtie](https://registry.hub.docker.com/u/compbio/ngseasy-bowtie) | automated build |\r\n|[picardtools](https://registry.hub.docker.com/u/compbio/ngseasy-picardtools) | automated build |\r\n|[samtools](https://registry.hub.docker.com/u/compbio/ngseasy-samtools) | automated build |\r\n|[freebayes](https://registry.hub.docker.com/u/compbio/ngseasy-freebayes/) | automated build |\r\n|[bedtools](https://registry.hub.docker.com/u/compbio/ngseasy-bedtools/) | automated build |\r\n|[bcbiovar](https://registry.hub.docker.com/u/compbio/ngseasy-bcbiovar/) | automated build |\r\n|[delly](https://registry.hub.docker.com/u/compbio/ngseasy-delly) | automated build |\r\n|[lumpy](https://registry.hub.docker.com/u/compbio/ngseasy-lumpy) | automated build |\r\n|[cnmops](https://registry.hub.docker.com/u/compbio/ngseasy-cnmops) | automated build |\r\n|[mhmm](https://registry.hub.docker.com/u/compbio/ngseasy-mhmm) | automated build |\r\n|[exomedepth](https://registry.hub.docker.com/u/compbio/ngseasy-exomedepth) | automated build |\r\n|[bamutil](https://registry.hub.docker.com/u/compbio/ngseasy-bamutil) | automated build |\r\n\r\nsamtools includes bcftools and htslib  \r\n\r\nIts as easy as: - \r\n```bash\r\ndocker pull compbio/ngseasy-${TOOL}\r\n```\r\n\r\n*******\r\n\r\n## 3. Make NGSeasy project directory\r\nThe user needs to make the relevent directory structures on their local machine before starting an NGS run. \r\n\r\nOn our sysetm we typically set up a top-level driectory called **ngs_projects** within which we store output from all our individual NGS projects. \r\n\r\nHere we are working from local top level directory called **media/**, but this can really be any folder on your local system ie your home directory **~/${USER}**.  \r\n\r\nWithin this directory **media** we make the following folders: - \r\n\r\n```bash\r\nngs_projects  \r\n|  \r\n|__raw_fastq  \r\n|__config_files  \r\n|__reference_genomes_b37  \r\n|__gatk_resources  \r\n|__ngseasy\r\n```\r\n\r\n**Note** The following directories are obtained in step **[4. Download NGSeasy Resources](https://github.com/KHP-Informatics/ngs/tree/master#4-download-ngseasy-resources)**.  \r\n**- reference_genomes_b37  **  \r\n**- gatk_resources **  \r\n\r\n**Move to media**\r\n```bash\r\n# Move to media/\r\ncd media\r\n```\r\n\r\n**make toplevel ngs_projects folder**\r\n```bash\r\n# make toplevel NGS folder\r\nmkdir ngs_projects \r\n```\r\n\r\n**make fast_raw folder**\r\n```bash\r\n# fastq staging area\r\nmkdir ngs_projects/fastq_raw \r\n```\r\n\r\n**make config_files folder**\r\n```bash\r\n# config files\r\nmkdir ngs_projects/config_files \r\n```\r\n\r\n**make ngseasy folder**\r\n```bash\r\n# NGSeasy scripts\r\nmkdir ngs_projects/ngseasy \r\n```\r\n\r\n*****\r\n\r\n## 4. Download NGSeasy Resources\r\nDownload the indexed reference genomes and example data for use with NGSeasy.\r\n\r\n**NGSeasy Resources:-**  \r\n- **reference_genomes_b37.tgz** b37 reference genomes indexed for use with all provided aligners (BWA, Bowtie2, Stampy, Novoalign) and annotation bed files for use with pipeline scripts\r\n- **gatk_resources.tar.gz** gatk resources bundle\r\n- **fastq_example.tgz** Example 75bp PE Illumina Whole Exome Sequence fastq data for **NA12878**\r\n- Annotation Databases Coming in the next update \r\n\r\n**Download the data to the top level directory**\r\n\r\n### FTP Details\r\n- **ftp:**  159.92.120.21  \r\n- **user:** compbio-public  \r\n- **pwd:**  compbio-public  \r\n- **port:** 21  \r\n\r\n**Move to top level directory**\r\n```bash\r\ncd ngs_projects\r\n```\r\n\r\n**FTP NGSeasy Resources**\r\n```bash\r\nftp 159.92.120.21\r\n```\r\n\r\n**mget NGSeasy Resources**\r\n```bash\r\nftp> cd /Public/NGSeasy_Public_Resources\r\nftp> prompt off\r\nftp> mget *.gz\r\nftp> exit\r\n```\r\nI would recommend using a separate program like [FileZilla](https://filezilla-project.org/), which will make it much easier for you to set up and manage your file transfers\r\n\r\n**Extract NGSeasy Resources**\r\n```bash\r\n# Extract resources\r\ncd ngs_projects/\r\ntar xvf gatk_resources.tgz; \r\ncd ngs_projects/gatk_resources\r\ngunzip *\r\n```\r\n**Extract NGSeasy Reference Genomes**\r\n```bash\r\n# Extract Reference Genomes\r\ncd ngs_projects/\r\ntar xvf reference_genomes_b37.tgz; \r\ncd ngs_projects/reference_genomes_b37\r\ngunzip *\r\n```\r\n****\r\n\r\n### GATK Resources\r\n- https://www.broadinstitute.org/gatk/guide/article.php?id=1215  \r\n- https://www.broadinstitute.org/gatk/guide/article.php?id=1213  \r\n\r\n**Downloading**\r\n```\r\nlocation: ftp.broadinstitute.org\r\nusername: gsapubftp-anonymous\r\npassword: <blank>\r\n```\r\n\r\n**b37 Resources: the Standard Data Set**\r\n- Reference sequence (standard 1000 Genomes fasta) along with fai and dict files\r\n- dbSNP in VCF. This includes two files:\r\n    - The most recent dbSNP release\r\n    This file subsetted to only sites discovered in or before dbSNPBuildID 129, which excludes the impact of the 1000 Genomes project and is useful for evaluation of dbSNP rate and Ti/Tv values at novel sites.\r\n    - HapMap genotypes and sites VCFs\r\n- OMNI 2.5 genotypes for 1000 Genomes samples, as well as sites, VCF\r\n    The current best set of known indels to be used for local realignment (note that we don't use dbSNP for this anymore); use both files:\r\n- 1000G_phase1.indels.b37.vcf (currently from the 1000 Genomes Phase I indel calls)\r\n- Mills_and_1000G_gold_standard.indels.b37.sites.vcf\r\n- A large-scale standard single sample BAM file for testing:\r\n    - NA12878.HiSeq.WGS.bwa.cleaned.recal.hg19.20.bam containing ~64x reads of NA12878 on chromosome 20\r\nThe results of the latest UnifiedGenotyper with default arguments run on this data set (NA12878.HiSeq.WGS.bwa.cleaned.recal.hg19.20.vcf)\r\n\r\n\r\n*****\r\n\r\n## 5. Get NGSeasy Sripts\r\nWe then need to get the latest NGSeasy scripts from [GitHub](https://github.com/KHP-Informatics/ngs) . The user is required to download the scripts to the `ngseasy` directory\r\n\r\n**move to the `ngseasy` directory**\r\n\r\n```bash\r\ncd /media/ngs_projects/nsgeasy\r\n```\r\n\r\n**clone the [ngs](https://github.com/KHP-Informatics/ngs) repository**\r\n\r\n```bash\r\ngit clone https://github.com/KHP-Informatics/ngs.git\r\n```\r\n\r\n**add `nsgeasy/ngs/bin` to your system PATH**\r\n\r\n```bash\r\nexport PATH=$PATH:/media/ngs_projects/nsgeasy/ngs/bin\r\n```\r\n\r\n**or add to global .bashrc**\r\n\r\n```bash\r\necho \"export PATH=$PATH:/media/ngs_projects/nsgeasy/ngs/bin\" ~/.bashrc\r\nsource ~/.bashrc\r\n```\r\n\r\n**alternatively donwload the scripts from our [GitHub Release](https://github.com/KHP-Informatics/ngs)** \r\n\r\n****************\r\n\r\n## 6. Manually Build required NGSeasy Container Images\r\n\r\nCurrently we are not able to automatically build some of the tools in pre-built docker containers due to licensing restrictions. \r\n\r\nSome of the software has restrictions on use particularly for commercial \r\npurposes. Therefore if you wish to use this for commercial purposes, then you \r\nleagally have to approach the owners of the various components yourself!  \r\n\r\n**Software composing the pipeline requiring registration:-**  \r\n\r\n   * novoalign http://www.novocraft.com/  \r\n   * Stampy http://www.well.ox.ac.uk/project-stampy  \r\n   * Platypus http://www.well.ox.ac.uk/platypus  \r\n   * GATK https://www.broadinstitute.org/gatk/  \r\n   * ANNOVAR http://www.openbioinformatics.org/annovar/  \r\n\r\n**These tools require manual download and registration with the proivder. For non-academics/commercial groups, you will need to pay for some of these tools.**\r\n\r\n### Dockerised and Manual Builds ##\r\n\r\n| Tool | Build |\r\n|-------------|----------------------|\r\n|[novoalign](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/ngseasy_novoalign) | manual build |\r\n|[annovar](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/ngseasy_annovar) | manual build |\r\n|[stampy](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/ngseasy_stampy) | manual build |\r\n|[platypus](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/nsgeasy_platypus) | manual build |\r\n|[gatk](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/ngseasy_gatk) | manual build |\r\n\r\nOnce you have paid/registered and downloaded the tool, we provide scripts and guidance for building these tools on your system.  \r\n\r\nIts as easy as:-  \r\n```{bash}\r\ndocker build -t compbio/ngseasy-${TOOL} .\r\n```\r\n\r\n******\r\n\r\n### 6.1 Building Stampy\r\n\r\n**resister at http://www.well.ox.ac.uk/project-stampy**  \r\n\r\nDownload stampy to local directory and check version number. If this differs from the [Dockerfile](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/ngseasy_stampy/Dockerfile) build file, \r\nthen edit the [Dockerfile](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/ngseasy_stampy/Dockerfile) if needed. \r\nYou will be emailed a URL to download stampy. Insert this into the [Dockerfile](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/ngseasy_stampy/Dockerfile)\r\n\r\n```bash\r\n# on our local system we cd to media\r\ncd /media\r\n\r\n# them move to ngs_projects toplevel directory\r\ncd ngs_projects\r\n\r\n# and then the ngseasy folder with all our ngs scripts\r\n# git  clone https://github.com/KHP-Informatics/ngs.git\r\n# if you havent alreay\r\ncd ngseasy\r\n\r\n# move to ngseasy_stampy folder\r\ncd ngs/ngs_docker_debian/ngseasy_stampy\r\n\r\n# build\r\ndocker build -t compbio/ngseasy-stampy:v1.0 .\r\n```\r\n******\r\n\r\n### 6.2 Building Platypus\r\n\r\n**resister at http://www.well.ox.ac.uk/platypus**\r\n\r\nDownload platypus to local directory and check version number. If this differs from the [Dockerfile](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/nsgeasy_platypus/Dockerfile) build file, \r\nthen edit the [Dockerfile](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/nsgeasy_platypus/Dockerfile) if needed. \r\nYou will be emailed a URL to download platypus. Insert this into the [Dockerfile](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/nsgeasy_platypus/Dockerfile) \r\n\r\n```bash\r\n# on our local system we cd to media\r\ncd /media\r\n\r\n# them move to ngs_projects toplevel directory\r\ncd ngs_projects\r\n\r\n# and then the ngseasy folder with all our ngs scripts\r\n# git  clone https://github.com/KHP-Informatics/ngs.git\r\n# if you havent alreay\r\ncd ngseasy\r\n\r\n# move to ngseasy_stampy folder\r\ncd ngs/ngs_docker_debian/ngseasy_platypus\r\n\r\n# build\r\ndocker build -t compbio/ngseasy-platypus:v1.0 .\r\n```\r\n\r\n******\r\n\r\n### 6.3 Building NOVOALIGN\r\n\r\n**Download Novoalign from  http://www.novocraft.com/** into the local build directory **ngs/ngs_docker_debian/ngseasy_novoalign**. \r\nEdit the [Dockerfile](https://github.com/KHP-Informatics/ngs/blob/master/containerized/ngs_docker_debian/ngseasy_novoalign/Dockerfile) to relfect\r\nthe correct version of novoalign.  \r\n\r\nTo use all novoalign fucntionality, you will need to **pay for a license**.   \r\n\r\nOnce you obtained your **novoalign.lic**, download this to the build directory **ngs/ngs_docker_debian/ngseasy_novoalign**, which now should contain your updated [Dockerfile](https://github.com/KHP-Informatics/ngs/blob/master/containerized/ngs_docker_debian/ngseasy_novoalign/Dockerfile).\r\n\r\n```bash\r\n# on our local system we cd to media\r\ncd /media\r\n\r\n# them move to ngs_projects toplevel directory\r\ncd ngs_projects\r\n\r\n# and then the ngseasy folder with all our ngs scripts\r\n# git  clone https://github.com/KHP-Informatics/ngs.git\r\n# if you havent alreay\r\ncd ngseasy\r\n\r\n# move to ngseasy_stampy folder\r\ncd ngs/ngs_docker_debian/ngseasy_novoalign\r\nls \r\n```\r\n\r\n**the directory should contain the following:-**\r\n\r\n```\r\nDockerfile\r\nnovoalign.lic\r\nREADME.md\r\nnovosortV1.03.01.Linux3.0.tar.gz\r\nnovocraftV3.02.08.Linux3.0.tar.gz\r\n```\r\n\r\n**build novoalign**\r\n\r\n```bash\r\n# build\r\ndocker build -t compbio/ngseasy-novoalign:v1.0 .\r\n```\r\n\r\n******\r\n\r\n### 6.4 Building GATK\r\n\r\nYou need to register and accept the GATK license agreement at https://www.broadinstitute.org/gatk/.  \r\n\r\nOnce done, download GATK and place in the GTAK build directory **ngs/ngs_docker_debian/ngseasy_gatk**.  \r\n\r\nEdit the [Dockerfile](https://github.com/KHP-Informatics/ngs/blob/master/containerized/ngs_docker_debian/ngseasy_gatk/Dockerfile) to relfect\r\nthe correct version of GATK.  \r\n\r\n```bash\r\n# on our local system we cd to media\r\ncd /media\r\n\r\n# them move to ngs_projects toplevel directory\r\ncd ngs_projects\r\n\r\n# and then the ngseasy folder with all our ngs scripts\r\n# git  clone https://github.com/KHP-Informatics/ngs.git\r\n# if you havent alreay\r\ncd ngseasy\r\n\r\n# move to ngseasy_stampy folder\r\ncd ngs/ngs_docker_debian/ngseasy_gatk\r\nls \r\n```\r\n\r\n**the directory should contain the following:-**\r\n\r\n```\r\nDockerfile\r\nREADME.md\r\nGenomeAnalysisTK-3.3-0.tar.bz2\r\n```\r\n\r\n**build gatk**\r\n\r\n```bash\r\n# build\r\ndocker build -t compbio/ngseasy-gatk:v1.0 .\r\n```\r\n\r\n******** \r\n\r\n## 7. Manually Build NGSeasy Variant Annotaion Container Images\r\n\r\nThe tools used for variant annotation use large databases and the docker images exceed 10GB. Therefore, the user should manually build these container images prior to running the NGS pipelines.\r\nDocker build files ([Dockerfile](https://docs.docker.com/jsearch/?q=Dockerfile)) are available for \r\n- [Annovar](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/ngseasy_annovar/Dockerfile)  \r\n- [VEP](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/ngseasy_vep/Dockerfile)   \r\n- [snpEff](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/ngseasy_snpeff/Dockerfile)  \r\n\r\n**Note** Annovar requires user registration.  \r\n\r\n**Once built on the user system, these container images can persist for as long as the user wants.**  \r\n\r\n**Large Variant Annotation Container Images**\r\n\r\n| Tool | Build |\r\n|-------------|----------------------|\r\n|[annovar](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/ngseasy_annovar) | manual build |\r\n|[vep](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/ngseasy_vep) | manual build |\r\n|[snpeff](https://github.com/KHP-Informatics/ngs/tree/master/containerized/ngs_docker_debian/ngseasy_snpeff) | manual build |\r\n\r\n\r\nIts as easy as:-  \r\n```{bash}\r\ndocker build -t compbio/ngseasy-${TOOL} .\r\n```\r\n******** \r\n### 7.1 Build VEP\r\n```bash\r\n\r\ncd /media/ngs_projects/nsgeasy/ngs/containerized/ngs_docker_debian/ngseasy_vep\r\n\r\nsudo docker build -t compbio/ngseasy-vep:${VERSION} .\r\n```\r\n******** \r\n### 7.2 Build Annovar\r\n\r\n```bash\r\ncd /media/ngs_projects/nsgeasy/ngs/containerized/ngs_docker_debian/ngseasy_annovar\r\n\r\nsudo docker build -t compbio/ngseasy-annovar:${VERSION} .\r\n```\r\n******** \r\n### 7.3 Build snpEff\r\n```bash\r\ncd /media/ngs_projects/nsgeasy/ngs/containerized/ngs_docker_debian/ngseasy_snpeff\r\n\r\nsudo docker build -t compbio/ngseasy-snpeff:${VERSION} .\r\n```\r\n*******\r\n\r\n## 8. Set up NGSeasy Project Working Directories\r\n\r\nRunning the script `ngseasy_initiate_project` ensures that all relevant directories are set up, and also enforces a clean structure to the NGS project.  \r\n\r\nWithin this we make a `raw_fastq` folder, where we temporarily store all the raw fastq files for each project. \r\nThis folder acts as an initial stagging area for the raw fastq files. During the project set up, we copy/move project/sample related fastq files to their own specific directories.\r\nFastq files must have suffix and be gzipped: **_1.fq.gz** or **_2.fq.gz**  \r\nfurture version will allow any format  \r\n\r\nRunning `ngseasy_initiate_project` with the relevent configuration file, will set up the following directory structure for every project and sample within a project:-  \r\n\r\n## NGS Project Directory \r\n```bash\r\n.\r\nngs_projects  \r\n|  \r\n|__raw_fastq  \r\n|__config_files  \r\n|__reference_genomes_b37  \r\n|__gatk_resources  \r\n|__ngseasy\r\n|\r\n|__ project_id  \r\n\t|  \r\n\t|__run_logs  \r\n\t|__config_files  \r\n\t|__project_vcfs  \r\n\t|__project_bams  \r\n\t|__project_reports  \r\n\t|\r\n\t|__sample_id_1  \r\n\t|\t|  \r\n\t|\t|__fastq  \r\n\t|\t|__tmp  \r\n\t|\t|__alignments  \r\n\t|\t|__vcf  \r\n\t|\t|__reports  \r\n\t|\t|__config_files  \r\n\t|\r\n\t|\r\n\t|__sample_id_n  \r\n\t\t|  \r\n\t\t|__fastq  \r\n\t\t|__tmp  \r\n\t\t|__alignments  \r\n\t\t|__vcf  \r\n\t\t|__reports  \r\n\t\t|__config_files  \r\n```\r\n\r\n**Running `ngseasy_initiate_project`**\r\n\r\n```bash\r\nngseasy_initiate_project -c config.file.tsv -d /media/ngs_projects\r\n```\r\n\r\n****************\r\n\r\n## 9. NGSeasy Project configuration file\r\n\r\nIn Excel make config file and save as [TAB] Delimited file with ``.tsv`` extenstion.  \r\nSee Example provided and [GoogleDoc](https://docs.google.com/spreadsheets/d/1kp1Nyw0x3zXqO2Wm2Z25ErJ0Z-Uoab8tjRPq9h4sonk/edit?usp=sharing). Remove the header from this file before running the pipeline. This sets up Information related to: Project Name, Sample Name, Library Type, Pipeline to call, NCPU.\r\n\r\nThe [config.file.tsv] should contain the following 15 columns for each sample to be run through a pipeline:- \r\n\r\n|Variable|type|Description|Options/Examples|\r\n|--------|--------|--------|--------|\r\nPOJECT_ID|string|Project ID|Cancer|\r\nSAMPLE_ID|string|Sample ID| T100|\r\nFASTQ1|string|Raw fastq file name read 1| foo_1_fq.gz|\r\nFASTQ2|string|Raw fastq file name read 1| foo_2_fq.gz|\r\nPROJECT_DIR|string|Project Directory| /medida/ngs_projects |\r\nDNA_PREP_LIBRARY_ID|string|DNA Libray Prep ID| Custom_Cancer |\r\nNGS_PLATFORM|string|Platform Name| ILLUMINA |\r\nNGS_TYPE|string|Experiment type| WGS/WEX/TGS/ |\r\nBED_ANNO|string|Annotation Bed File|exons_b37.bed|\r\nPIPELINE|string|NGSeasy Pipeline Script|ngs_full_gatk/ngs_full_no_gatk|\r\nALIGNER|string|Aligner| bwa/bowtie/stampy/novoalign|\r\nVARCALLER|string|Variant Caller|ensemble/freebayes/platypus/UnifiedGenotyper/HaplotypeCaller|\r\nGTMODEGATK|string|GATK Variant Caller Mode|EMIT_ALL_CONFIDENT_SITES/EMIT_VARIANTS_ONLY|\r\nCLEANUP|string|Clean Up Files (TRUE/FALSE)|TRUE/FALSE|\r\nNCPU|number|Number of cores to call|1..n|\r\nVERSION|number|NGSeasy Version |v0.9/v1.0|\r\n\r\nIn the config file we set PIPELINE to call the pipeline **[ngs_full_gatk]** or **[ngs_full_no_gatk]**.   \r\n\r\n_coming soon_ options to add user email, specify non-gatk runs  \r\n\r\n*************\r\n\r\n## 10. Copy Project Fastq files to relevent Project/Sample Directories\r\n\r\n```bash\r\nngseasy_initiate_fastq -c config.file.tsv -d /media/ngs_projects\r\n```\r\n\r\n****\r\n\r\n## 11. Start the NGSeasy Volume Contaier\r\n\r\nIn the Docker container the project directory is mounted in `/home/pipeman/ngs_projects`\r\n\r\n```bash\r\nngseasy_volumes_container -d /media/ngs_projects\r\n```\r\n\r\n**inside ngseasy_volumes_container**. This is what it is calling. Note the directory names and mounts. \r\n\r\n```bash\r\n\r\n# host_vol_dir = ngs_projects\r\n\r\n  docker run \\\r\n  -d \\\r\n  -P \\\r\n  -v ${host_vol_dir}/fastq_raw:/home/pipeman/fastq_raw \\\r\n  -v ${host_vol_dir}/reference_genomes_b37:/home/pipeman/reference_genomes_b37 \\\r\n  -v ${host_vol_dir}/gatk_resources:/home/pipeman/gatk_resources \\\r\n  -v ${host_vol_dir}:/home/pipeman/ngs_projects \\\r\n  -v ${host_vol_dir}/ngseasy/ngs/bin:/home/pipeman/ngseasy_scripts \\\r\n  --name volumes_container \\\r\n  -t compbio/ngseasy-base:wheezy\r\n```\r\n\r\n****\r\n\r\n## 12. Running an NGSeasy full pipeline : from raw fastq to vcf calls\r\n\r\n**run ngseay**\r\n\r\n```bash\r\n\r\n    ngseasy -c config.file.tsv -d /media/nsg_projects\r\n    \r\n```\r\n\r\nThe pipeline is defined in the config file as **[ngs_full_gatk]**\r\n\r\n*****\r\n\r\n## The NGSeasy Pipelines \r\n\r\n| Pipeline             | Short Description    |\r\n|----------------------|----------------------|\r\n| [ngs_full_gatk](https://github.com/KHP-Informatics/ngs/blob/master/bin/ngs_full_gatk) | fastq to recalibrated bam to vcf using GATK  |\r\n| [ngs_full_no_gatk](https://github.com/KHP-Informatics/ngs/blob/master/bin/ngs_full_no_gatk)    | fastq to recalibrated bam to vcf  |\r\n\r\ngatk version includes indel realignment and base recalibration.  \r\n\r\nNon-academics/commercial groups need to pay for GATK.  \r\n\r\nCurrently **ngs_full_gatk** pipeline is the most developed module.  \r\n\r\nThe **ngs_full_no_gatk** pipeline provides alternatives to processing with GATK. Here BamUtil:recab is used to recalibrate base quality scores and freebayes/platypus are the variant callers of choice.\r\n\r\n## ngs_full_gatk  \r\n\r\nEach **pipeline** is a bash wrapper that calls a number of functions/steps set out in [The Full NGSeasy pipeline](https://github.com/KHP-Informatics/ngs#the-full-ngseasy-pipeline).\r\n\r\nHere  **[ngs_full_gatk]** is a wrapper/fucntion for calling an NGS pipeline. The inside to this script is set out below:-  \r\n\r\n```bash\r\n#!/bin/bash -x\r\n\r\n#usage printing func\r\nusage()\r\n{\r\ncat << EOF\r\n  This script calls the NGSeasy pipeline ngs_full_gatk\r\n\r\n  ARGUMENTS:\r\n  -h      Flag: Show this help message\r\n  -c      NGSeasy project and run configureation file\r\n  -d      NGSeasy project directory\r\n\r\n  EXAMPLE USAGE:\r\n    \r\n    ngseasy -c config.file.tsv -d project_directory\r\n\r\nEOF\r\n}\r\n\r\n#get options for command line args\r\n  while  getopts \"hc:d:\" opt\r\n  do\r\n\r\n      case ${opt} in\r\n\t  h)\r\n\t  usage #print help\r\n\t  exit 0\r\n\t  ;;\r\n\t  \r\n\t  c)\r\n\t  config_tsv=${OPTARG}\r\n\t  ;;\r\n\r\n\t  d)\r\n\t  project_directory=${OPTARG}\r\n\t  ;; \r\n      esac\r\n  done\r\n\r\n#check config file exists.\r\nif [ ! -e \"${config_tsv}\" ] \r\nthen\r\n\t    echo \"ERROR :  ${config_tsv} does not exist \"\r\n\t    usage;\r\n\t    exit 1;\r\nfi\r\n\r\n#check exists.\r\n  if [ ! -d \"${project_directory}\" ] \r\n  then\r\n\t  echo \" ERROR : ${project_directory} does not exist \"\r\n\t  usage;\r\n\t  exit 1;\r\n  fi\r\n\r\n##################  \r\n# start pipeline #\r\n##################\r\n\r\n# Each of these fucntions will call the required image/container(s) and run a part of the NGS pipeline. Each step is usually \r\n# dependent on the previous step(s) - in that they require certain data/input/output in the correct format \r\n# and with the correct nameing conventions enforced by our pipeline to exist, before executing.\r\n\r\nngseasy_fastqc  -c ${config_tsv} -d ${project_directory}\r\n\r\nngseasy_trimmomatic -c ${config_tsv} -d ${project_directory}\r\n\r\nngseasy_alignment -c ${config_tsv} -d ${project_directory}\r\n\r\nngseasy_addreadgroup -c ${config_tsv} -d ${project_directory}\r\n\r\nngseasy_markduplicates -c ${config_tsv} -d ${project_directory}\r\n\r\nngseasy_indel_realn -c ${config_tsv} -d ${project_directory}\r\n\r\nngseasy_base_recal -c ${config_tsv} -d ${project_directory}\r\n\r\nngseasy_filter_recalbam -c ${config_tsv} -d ${project_directory}\r\n\r\nngseasy_alignment_qc -c ${config_tsv} -d ${project_directory}\r\n \r\nngseasy_variant_calling -c ${config_tsv} -d ${project_directory}\r\n\r\n# coming soon...\r\n# ngseasy_filter_bam -c ${config_tsv} -d ${project_directory}\r\n# ngseasy_cnv_calling -c ${config_tsv} -d ${project_directory}\r\n# ngseasy_variant_filtering -c ${config_tsv} -d ${project_directory}\r\n# ngseasy_variant_annotation -c ${config_tsv} -d ${project_directory}\r\n# ngseasy_report -c ${config_tsv} -d ${project_directory}\r\n```\r\n\r\n****\r\n\r\nOutput suffixes \r\n===================\r\n\r\n### Alignment Output\r\n*.raw.sam  (WEX ~ 8GB)\r\n*.raw.bam  \r\n*.raw.bai  \r\n*.sort.bam  (WEX ~ 3GB)\r\n*.sort.bai  \r\n\r\n****\r\n### Addreadgroup\r\n*.addrg.bam  \r\n*.addrg.bai  \r\n*.addrg.bam.bai  \r\n\r\n****\r\n### Dupemark\r\n*.dupemk.bam  \r\n*.dupemk.bai\r\n*.dupemk.bam.bai  \r\n\r\n***\r\n### Indel realign\r\n*.realn.bam  \r\n*.realn.bai\r\n*.realn.bam.bai  \r\n\r\n\r\n***\r\n### Base recal\r\n*.recal.bam  (WEX ~ 4.4G)  \r\n*.recal.bai  \r\n*.recal.bam.bai  \r\n*.realn.bam.BaseRecalibrator.table  \r\n*.recal.bam.BaseRecalibrator.table  \r\n*.recal.bam.BaseRecalibrator.BQSR.csv  \r\n\r\n***\r\n\r\n## Thresholds for Variant calling etc\r\n\r\nFor Freebayes and Platypus tools:-  \r\n\r\n- We set min coverage to 10  \r\n- Min mappinng quality to 20  \r\n- Min base quality to 20\r\n\r\nFor GATK HaplotypeCaller (and UnifiedGenotyper)\r\n\r\n```-stand_call_conf 30 -stand_emit_conf 10 -dcov 250 -minPruning 10```\r\n\r\nNote: ```minPruning 10``` was added as many runs of HaplotypeCaller failed when using non-bwa aligend and GATK best practices cleaned BAMs. This fix sorted all problems out, and you really dont want dodgy variant calls...do you? Same goes for thresholds hard coded for use with Freebayes and Platypus.  \r\nThese setting all work well in our hands. Feel  free to edit the scripts to suit your needs.\r\n\r\n\r\n****\r\nblah blah blah\r\n\r\n****\r\n\r\n## Gottchas\r\n\r\n**bin/bash -c**\r\n\r\n- need to add ```/bin/bash -c ${COMMAND}``` when software require ```>``` redirect to some output\r\n\r\nexample below for bwa:-  \r\n\r\n```\r\n  sudo docker run \\\r\n  -P \\\r\n  --name sam2bam_${SAMPLE_ID} \\\r\n  --volumes-from volumes_container \\\r\n  -t compbio/ngseasy-samtools:v0.9 /bin/bash -c \\\r\n  \"/usr/local/pipeline/samtools/samtools view -bhS ${SOUTDocker}/alignments/${BAM_PREFIX}.raw.bwa.sam > ${SOUTDocker}/alignments/${BAM_PREFIX}.raw.bwa.bam\"\r\n  ```\r\n\r\nrunnig this without ```/bin/bash -c``` breaks. The ```>``` is called outside of the container\r\n\r\n### The Annoying thing about GATK!\r\nThis will break your runs if multiple calls try and access the file when the first call deletes it!  \r\n```\r\nWARN  11:05:27,577 RMDTrackBuilder - Index file /home/pipeman/gatk_resources/Mills_and_1000G_gold_standard.indels.b37.vcf.idx is out of date (index older than input file), deleting and updating the index file \r\nINFO  11:05:31,699 RMDTrackBuilder - Writing Tribble index to disk for file /home/pipeman/gatk_resources/Mills_and_1000G_gold_standard.indels.b37.vcf.idx \r\n```\r\n\r\n\r\n## CNV tools to think about\r\nEXCAVATOR: detecting copy number variants from whole-exome sequencing data @ http://genomebiology.com/2013/14/10/R120\r\n\r\n>We developed a novel software tool, EXCAVATOR, for the detection of copy number variants (CNVs) from whole-exome sequencing data. EXCAVATOR combines a three-step normalization procedure with a novel heterogeneous hidden Markov model algorithm and a calling method that classifies genomic regions into five copy number states. We validate EXCAVATOR on three datasets and compare the results with three other methods. These analyses show that EXCAVATOR outperforms the other methods and is therefore a valuable tool for the investigation of CNVs in largescale projects, as well as in clinical research and diagnostics. EXCAVATOR is freely available at http://sourceforge.net/projects/excavatortool/ webcite.\r\n\r\n*****\r\n\r\n## Useful Links \r\n\r\n- https://bcbio.wordpress.com/  \r\n- https://basecallbio.wordpress.com/2013/04/23/base-quality-score-rebinning/  \r\n- https://github.com/statgen/bamUtil  \r\n- http://genome.sph.umich.edu/wiki/BamUtil:_recab  \r\n- https://github.com/chapmanb/bcbio.variation  \r\n- http://plagnol-lab.blogspot.co.uk/2013/11/faq-and-clarifications-for-exomedepth-r.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}